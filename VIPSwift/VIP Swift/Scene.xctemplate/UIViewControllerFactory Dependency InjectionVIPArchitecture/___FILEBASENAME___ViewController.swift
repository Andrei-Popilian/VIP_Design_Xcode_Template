//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ___VARIABLE_sceneName___DisplayLogic where Self: UIViewController {
  
  func displayViewModel(_ viewModel: ___VARIABLE_sceneName___Model.ViewModel)
}

final class ___VARIABLE_sceneName___ViewController<Factory>: UIViewController, Displayable where Factory: ___VARIABLE_sceneName___Factorable {
  
  private let factory: Factory
  private let mainView: ___VARIABLE_sceneName___View
  private var interactor: ___VARIABLE_sceneName___Interactable!
  
  private lazy var router: ___VARIABLE_sceneName___Routing = {
    factory.makeRouter(viewController: self)
  }()
  
  init(factory: Factory, mainView: ___VARIABLE_sceneName___View, dataSource: ___VARIABLE_sceneName___Model.DataSource) {
    self.factory = factory
    self.mainView = mainView
    
    super.init(nibName: nil, bundle: nil)
    self.interactor = factory.makeInteractor(viewController: self, dataSource: dataSource)
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
    //interactor.doSomething(item: 22)
  }
  
  override func loadView() {
    mainView.delegate = self
    view = mainView
  }
  
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented, You shouldn't initialize the ViewController using Storyboards")
  }
}


//MARK: - ___VARIABLE_sceneName___DisplayLogic
extension ___VARIABLE_sceneName___ViewController: ___VARIABLE_sceneName___DisplayLogic {
  
  func displayViewModel(_ viewModel: ___VARIABLE_sceneName___Model.ViewModel) {
    DispatchQueue.main.async {
      switch viewModel {
        
      case .doSomething(let viewModel):
        self.displayDoSomething(viewModel)
      }
    }
  }
}


//MARK: - ___VARIABLE_sceneName___ViewDelegate
extension ___VARIABLE_sceneName___ViewController: ___VARIABLE_sceneName___ViewDelegate {
  
  func sendDataBackToParent(_ data: Data) {
    //usually this delegate takes care of user actions and requests through UI
    
    //do something with the data or message sent back from mainView
  }
}


//MARK: - Private Zone
private extension ___VARIABLE_sceneName___ViewController {
  
  func displayDoSomething(_ viewModel: NSObject) {
    print("Use the mainView to present the viewModel")
    //example of using router
    router.routeTo(.xScene(xData: 22))
  }
}

