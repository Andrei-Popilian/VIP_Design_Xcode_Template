//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

typealias ___VARIABLE_sceneName___Interactable = ___VARIABLE_sceneName___BusinessLogic & ___VARIABLE_sceneName___DataStore

protocol ___VARIABLE_sceneName___BusinessLogic {
    
    func doRequest(_ request: ___VARIABLE_sceneName___Model.Requests)
}

protocol ___VARIABLE_sceneName___DataStore {
    var dataSource: ___VARIABLE_sceneName___Model.DataSource { get }
}

struct ___VARIABLE_sceneName___Interactor<Factory>: Interactable, ___VARIABLE_sceneName___DataStore where Factory: ServicesFactorable & ___VARIABLE_sceneName___Factorable {
    
    var dataSource: ___VARIABLE_sceneName___Model.DataSource
    
    private var factory: Factory
    private var presenter: ___VARIABLE_sceneName___PresentationLogic
    
    init(factory: Factory, viewController: ___VARIABLE_sceneName___DisplayLogic?, dataSource: ___VARIABLE_sceneName___Model.DataSource) {
        self.factory = factory
        self.dataSource = dataSource
        
        self.presenter = factory.makePresenter(viewController)
    }
}


//MARK: - ___VARIABLE_sceneName___BusinessLogic
extension ___VARIABLE_sceneName___Interactor: ___VARIABLE_sceneName___BusinessLogic {
    
    func doRequest(_ request: ___VARIABLE_sceneName___Model.Requests) {
        
        switch request {
            
        case .doSomething(let item):
            doSomething(item)
        }
    }
}


//MARK: - Private Zone
private extension ___VARIABLE_sceneName___Interactor {
    
    func doSomething(_ item: Int) {
        
        //use a Service or use the service here if that is not expensive
        //let serviceX = factory.makeXService()
        
        // get new data async or sync
        //let newData = serviceX.getNewData()
        
        presenter.presentResponse(.doSomething(item + 1, true))
    }
}
