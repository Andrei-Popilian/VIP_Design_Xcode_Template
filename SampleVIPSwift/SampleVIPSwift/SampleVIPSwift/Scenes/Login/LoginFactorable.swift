//
//  LoginFactorable.swift
//  SampleVIPSwift
//
//  Created by Andrei Popilian on 24/11/2019.
//  Copyright (c) 2019 Andrei Popilian. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

extension AppInjector {
  
  struct LoginInjector {
    static let shared: LoginInjector = LoginInjector()
    private init() {}
  }
}

extension AppInjector.LoginInjector: LoginFactorable  {}

protocol LoginFactorable: Factorable, LoginServicesFactorable {
  
  func makeInteractor(viewController: LoginDisplayLogic?, dataSource: LoginModel.DataSource) -> LoginInteractable
  func makePresenter(_ viewController: LoginDisplayLogic?) -> LoginPresentationLogic
  func makeRouter(viewController: UIViewController?) -> LoginRouting
}

extension LoginFactorable {
  
  func makeInteractor(viewController: LoginDisplayLogic?, dataSource: LoginModel.DataSource) -> LoginInteractable {
    LoginInteractor(factory: AppInjector.LoginInjector.shared, viewController: viewController, dataSource: dataSource)
  }
  
  func makePresenter(_ viewController: LoginDisplayLogic?) -> LoginPresentationLogic {
    LoginPresenter(viewController)
  }
  
  func makeRouter(viewController: UIViewController?) -> LoginRouting {
    LoginRouter(viewController)
  }
}


//MARK: - Service Factorable
protocol LoginServicesFactorable {
  
  //func makeXService() -> xService
}

extension LoginServicesFactorable {
  
  //    func makeXService() -> xService {
  //        xService()
  //    }
}
