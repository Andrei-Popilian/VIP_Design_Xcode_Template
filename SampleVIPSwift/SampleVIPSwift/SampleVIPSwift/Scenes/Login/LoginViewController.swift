//
//  LoginViewController.swift
//  SampleVIPSwift
//
//  Created by Andrei Popilian on 24/11/2019.
//  Copyright (c) 2019 Andrei Popilian. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic where Self: UIViewController {
  
  func displayViewModel(_ viewModel: LoginModel.ViewModel)
}

final class LoginViewController<Factory>: UIViewController, Displayable where Factory: LoginFactorable {
  
  private let factory: Factory
  private let mainView: LoginView
  private var interactor: LoginInteractable!
  
  private lazy var router: LoginRouting = {
    factory.makeRouter(viewController: self)
  }()
  
  init(factory: Factory, mainView: LoginView, dataSource: LoginModel.DataSource) {
    self.factory = factory
    self.mainView = mainView
    
    super.init(nibName: nil, bundle: nil)
    self.interactor = factory.makeInteractor(viewController: self, dataSource: dataSource)
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
    //interactor.doSomething(item: 22)
  }
  
  override func loadView() {
    mainView.delegate = self
    view = mainView
  }
  
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented, You shouldn't initialize the ViewController using Storyboards")
  }
  
  //Only for test purpose
  func getCurrentDataSource() -> LoginModel.DataSource {
    return interactor.dataSource
  }
  
  //only for test purpose
  func doSomethingToInteractor() {
     doSomethingWithInteractor(dataSource: interactor.dataSource)
  }
}


//MARK: - LoginDisplayLogic
extension LoginViewController: LoginDisplayLogic {
  
  func displayViewModel(_ viewModel: LoginModel.ViewModel) {
    DispatchQueue.main.async {
      switch viewModel {
        
      case .doSomething(let viewModel):
        self.displayDoSomething(viewModel)
      }
    }
  }
}


//MARK: - LoginViewDelegate
extension LoginViewController: LoginViewDelegate {
  
  func sendDataBackToParent(_ data: Data) {
    //usually this delegate takes care of user actions and requests through UI
    
    //do something with the data or message sent back from mainView
  }
}


//MARK: - Private Zone
private extension LoginViewController {
  
  func displayDoSomething(_ viewModel: NSObject) {
    print("Use the mainView to present the viewModel")
    //example of using router
    router.routeTo(.xScene(xData: 22))
  }
  
  func doSomethingWithInteractor(dataSource: LoginModel.DataSource) {
    interactor.doRequest(.doSomething(item: dataSource.testVariable))
  }
}

