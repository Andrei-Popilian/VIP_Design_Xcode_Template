//
//  FirstFactorable.swift
//  SampleVIPSwift
//
//  Created by Andrei Popilian on 31/10/2019.
//  Copyright (c) 2019 Andrei Popilian. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

extension AppInjector {
    
    struct FirstInjector {
        static let shared: FirstInjector = FirstInjector()
        private init() {}
    }
}

extension AppInjector.FirstInjector: FirstFactorable  {}

protocol FirstFactorable: Factorable, FirstServicesFactorable {

    func makeInteractor(viewController: FirstDisplayLogic?, dataSource: FirstModel.DataSource) -> FirstInteractable
    func makePresenter(_ viewController: FirstDisplayLogic?) -> FirstPresentationLogic
    func makeRouter(viewController: UIViewController?) -> FirstRouting
}

extension FirstFactorable {
    
    func makeInteractor(viewController: FirstDisplayLogic?, dataSource: FirstModel.DataSource) -> FirstInteractable {
        FirstInteractor(factory: AppInjector.FirstInjector.shared, viewController: viewController, dataSource: dataSource)
    }
    
    func makePresenter(_ viewController: FirstDisplayLogic?) -> FirstPresentationLogic {
        FirstPresenter(viewController)
    }
    
    func makeRouter(viewController: UIViewController?) -> FirstRouting {
        FirstRouter(viewController)
    }
}

// copy this on a separate file
protocol FirstServicesFactorable {
    
    //func makeXService() -> xService
}

extension FirstServicesFactorable {
    
//    func makeXService() -> xService {
//        xService()
//    }
}
