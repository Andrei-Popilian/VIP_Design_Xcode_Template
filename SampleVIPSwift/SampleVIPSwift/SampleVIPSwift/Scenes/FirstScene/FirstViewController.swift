//
//  FirstViewController.swift
//  SampleVIPSwift
//
//  Created by Andrei Popilian on 31/10/2019.
//  Copyright (c) 2019 Andrei Popilian. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FirstDisplayLogic where Self: UIViewController {
    
    func displayViewModel(_ viewModel: FirstModel.ViewModel)
}

final class FirstViewController<Factory>: UIViewController, Displayable where Factory: FirstFactorable {
    
    private let factory: Factory
    private let mainView: FirstView
    private var interactor: FirstInteractable!
    
    private lazy var router: FirstRouting = {
        factory.makeRouter(viewController: self)
    }()
    
    init(factory: Factory, mainView: FirstView, dataSource: FirstModel.DataSource) {
        self.factory = factory
        self.mainView = mainView
        
        super.init(nibName: nil, bundle: nil)
        self.interactor = factory.makeInteractor(viewController: self, dataSource: dataSource)
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        //doSomething()
    }
    
    override func loadView() {
        mainView.delegate = self
        view = mainView
        
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented, You should't initialize the ViewController through Storyboards")
    }
  
  //Only for test purpose
  func getCurrentDataSource() -> FirstModel.DataSource {
    return interactor.dataSource
  }
  
  //only for test purpose
  func doSomethingToInteractor() {
     doSomethingWithInteractor(dataSource: interactor.dataSource)
  }

}


//MARK: - FirstDisplayLogic
extension FirstViewController: FirstDisplayLogic {
    
    func displayViewModel(_ viewModel: FirstModel.ViewModel) {
        
        switch viewModel {
            
        case .doSomething(let viewModel):
            displayDoSomething(viewModel)
        }
    }
}


//MARK: - FirstViewDelegate
extension FirstViewController: FirstViewDelegate {
    
    func sendDataBackToParent(_ data: Data) {
        //usually this delegate takes care of users actions and requests through UI
        
        //do something with the data or message send back from View
    }
}


//MARK: - Private Zone
private extension FirstViewController {
    
    func displayDoSomething(_ viewModel: NSObject) {
        print("Use the mainView to present the viewModel")
        //example of using router
        router.routeTo(.xScene(22))
    }
  
  func doSomethingWithInteractor(dataSource: FirstModel.DataSource) {
    interactor.doRequest(.doSomething(dataSource.testVariable))
  }
}
