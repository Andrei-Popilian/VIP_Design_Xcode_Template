//
//  FirstInteractor.swift
//  SampleVIPSwift
//
//  Created by Andrei Popilian on 31/10/2019.
//  Copyright (c) 2019 Andrei Popilian. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

typealias FirstInteractable = FirstBusinessLogic & FirstDataStore

protocol FirstBusinessLogic {
    
    func doRequest(_ request: FirstModel.Request)
}

protocol FirstDataStore {
    var dataSource: FirstModel.DataSource { get }
}

final class FirstInteractor<Factory>: Interactable, FirstDataStore where Factory: FirstServicesFactorable & FirstFactorable {
    
    var dataSource: FirstModel.DataSource
    
    private var factory: Factory
    private var presenter: FirstPresentationLogic
    
    init(factory: Factory, viewController: FirstDisplayLogic?, dataSource: FirstModel.DataSource) {
        self.factory = factory
        self.dataSource = dataSource
        self.presenter = factory.makePresenter(viewController)
    }
}


//MARK: - FirstBusinessLogic
extension FirstInteractor: FirstBusinessLogic {
    
    func doRequest(_ request: FirstModel.Request) {
        
        switch request {
            
        case .doSomething(let item):
            doSomething(item)
        }
    }
}


//MARK: - Private Zone
private extension FirstInteractor {
    
    func doSomething(_ item: Int) {
        
        //use a Service or use the service here if that is not expensive
        //let serviceX = factory.makeXService()
        
        // get new data async or sync
        //let newData = serviceX.getNewData()
      
        dataSource.testVariable = item + 1

        presenter.presentResponse(.doSomething(item + 1, true))
    }
}
